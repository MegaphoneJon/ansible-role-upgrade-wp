---
- name: Ensure file owner/perms are correct
  file:
    path: "{{ webroot }}"
    state: directory
    mode: ug+rw
    owner: "{{ run_as_user }}"
    group: "{{ run_as_user }}"
    recurse: yes
  become: yes

- name: git pull
  git:
    repo: "{{ git_repo_url }}"
    dest: "{{ gitroot }}"
    track_submodules: no
  become: yes
  become_user: "{{ run_as_user }}"
  when: git_repo_url is not none

# WP CORE
- name: Get current git commit hash
  command: git rev-parse HEAD
  args:
    chdir: "{{ webroot }}"
  register: latest_commit
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: FALSE

- name: Clear "last updated" times so we can get the latest update info
  command: wp transient delete --network --all
  args:
    chdir: "{{ webroot }}"
  changed_when: false
  become: yes
  become_user: "{{ run_as_user }}"

- name: See if core needs updating
  command: wp core check-update --field=version --format=csv
  args:
    chdir: "{{ webroot }}"
  register: latest_core_version
  changed_when: false
  failed_when: false
  become: yes
  become_user: "{{ run_as_user }}"

- name: Update core
  command: wp core update
  args:
    chdir: "{{ webroot }}"
  become: yes
  become_user: "{{ run_as_user }}"
  when:  latest_core_version.stdout is defined and latest_core_version.stdout != ""

- name: git add the core update
  command: git add -v -A
  args:
    chdir: "{{ webroot }}"
  register: add_result
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: add_result.stdout != ''
  failed_when: add_result.stderr != ''
  when:  latest_core_version.stdout is defined and latest_core_version.stdout != ""

- name: git commit core update
  command: "git commit -m 'WP core upgrade: Version {{ latest_core_version.stdout }}'"
  args:
    chdir: "{{ webroot }}"
  register: commit_result
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: commit_result.rc == 0
  failed_when: not(commit_result.rc == 0 or 'nothing to commit, working tree clean' in commit_result.stdout_lines)
  when:  latest_core_version.stdout is defined and latest_core_version.stdout != ""

# PLUGINS
- name: Get a list of plugins that need updating
  shell: "wp plugin status | grep '^ U' | tr -s ' ' | cut -f 3 -d ' '"
  args:
    chdir: "{{ webroot }}"
  register: plugins_needing_upgrade
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: false
  failed_when: plugins_needing_upgrade.stderr != ''
  tags: upgrade-plugins

- name: Check for paid plugins from Total theme
  ansible.builtin.shell: "wp theme list | grep '^Total\\W'"
  args:
    chdir: "{{ webroot }}"
  register: total_theme_installed
  changed_when: false
  failed_when: false
  become: yes
  become_user: "{{ run_as_user }}"
  tags: upgrade-plugins

- name: Check if Total plugins need upgrading
  shell: >
    wp eval
    'require_once getcwd() . "/wp-content/themes/Total/inc/admin/recommended-plugins.php";
    require_once getcwd() . "/wp-content/themes/Total/inc/lib/tgmpa/class-tgm-plugin-activation.php";
    $recommended = new TotalTheme\Admin\Recommended_Plugins();
    $recommended->tmpa_register();
    // This has the download URLs.
    $tgmpa = TGM_Plugin_Activation::get_instance();
    $plugin_table = new TGMPA_List_Table();
    wp_clean_plugins_cache( false );
    $plugin_table->prepare_items();
    $needsUpgrade = [];
    foreach($plugin_table->items as $plugin) {
    if (version_compare($plugin["installed_version"], $plugin["available_version"], "<")) {
    echo $plugin["slug"] . ": " .  $tgmpa->plugins[$plugin["slug"]]["source"] . "\n";
    }
    }'
  args:
    chdir: "{{ webroot }}"
  register: total_plugins_needing_upgrade
  changed_when: false
  tags: upgrade-plugins
  when: total_theme_installed.stdout != ''
  become_user: "{{ run_as_user }}"

- name: Set module variable to plugin
  set_fact:
    module_type: "plugin"
  tags: upgrade-plugins

- name: Identify if any plugins need downloading on a live site
  set_fact:
    paid_plugins_needing_upgrade: "{{ plugins_needing_upgrade.stdout_lines|default([], True)|intersect(wp_paid_modules) }}"
    module_source: zip
  when: wp_paid_modules is defined
  tags: upgrade-plugins

- name: Generate a unique list of paid plugins needing an upgrade
  set_fact:
    unique_paid_plugins_needing_upgrade: "{{ ansible_play_hosts_all|map('extract', hostvars, 'paid_plugins_needing_upgrade')|list|flatten|unique }}"
  run_once: true
#  when: paid_plugins_needing_upgrade is defined and paid_plugins_needing_upgrade|length > 0
  tags: upgrade-plugins

- name: Download paid plugins
  include_tasks:
    file: acquire-paid-module.yml
  loop: "{{ unique_paid_plugins_needing_upgrade }}"
  when: unique_paid_plugins_needing_upgrade is defined
  tags: upgrade-plugins

#- name: Download Total plugins
#  get_url:
#    url: "{{ item.value }}"
#    dest: "/tmp/{{ item.key }}.zip"
#    force: true

- name: Update paid plugins
  include_tasks:
    file: update-module.yml
  loop: "{{ paid_plugins_needing_upgrade }}"
  tags: upgrade-plugins

#- name: Update Total plugins
#  include_tasks:
#    file: update-module.yml
#  loop: "{{ total_plugins_needing_upgrade }}"
#  tags: upgrade-plugins

- name: Determine which plugins should be updated normally
  set_fact:
    normal_plugins_needing_upgrade: "{{ plugins_needing_upgrade.stdout_lines | difference(wp_paid_modules | list) | difference(plugin_redlist) }}"
    module_source: normal

- name: Update plugins
  include_tasks:
    file: update-module.yml
  loop: "{{ normal_plugins_needing_upgrade|default([], True) }}"
  when: normal_plugins_needing_upgrade is defined
  tags: upgrade-plugins

- name: Get a list of themes that need updating
  shell: "wp theme status | grep '^ U' | tr -s ' ' | cut -f 3 -d ' '"
  args:
    chdir: "{{ webroot }}"
  register: themes_needing_upgrade
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: false
  failed_when: themes_needing_upgrade.stderr != ''

- name: Set module variable to theme
  set_fact:
    module_type: "theme"

- name: Update themes
  include_tasks:
    file: update-module.yml
  loop: "{{ themes_needing_upgrade.stdout_lines|default([], true) | difference(theme_redlist) }}"
  when: themes_needing_upgrade.stdout_lines is defined and item not in theme_redlist

- name: Update translations
  command: "{{ item }}"
  args:
    chdir: "{{ webroot }}"
  become: yes
  become_user: "{{ run_as_user }}"
  register: translation_result
  with_items:
    - 'wp language core update'
    - 'wp language plugin update --all'
    - 'wp language theme update --all'
  changed_when: translation_result.stdout is not search("Translations are up to date.")

- name: git add translations
  command: git add -v -A
  args:
    chdir: "{{ webroot }}"
  register: add_result
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: add_result.stdout != ''
  failed_when: add_result.stderr != ''

- name: git commit translations
  command: "git commit -m 'WP translation updates'"
  args:
    chdir: "{{ webroot }}"
  register: commit_result
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: commit_result.rc == 0
  failed_when: not(commit_result.rc == 0 or 'nothing to commit, working tree clean' in commit_result.stdout_lines)

- name: git push
  command: git push
  args:
    chdir: "{{ webroot }}"
  register: push_result_addl
  become: yes
  become_user: "{{ run_as_user }}"
  when: git_repo_push_url is not search("https://")
  changed_when: push_result_addl.rc == 0 and push_result_addl.stderr != 'Everything up-to-date'
  failed_when: not(push_result_addl.rc == 0)
  tags: upgrade-plugins

- name: Get git changelog
  command: "git log --oneline {{ latest_commit.stdout }}..HEAD"
  args:
    chdir: "{{ webroot }}"
  register: changelog
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: FALSE
  when: latest_commit.stdout is defined
  tags: upgrade-plugins

- name: Print git changelog
  debug:
    var: changelog.stdout
  changed_when: FALSE
  when: latest_commit.stdout is defined
  tags: upgrade-plugins

- name: List changelog links
  debug:
    msg: "https://wordpress.org/plugins/{{ item }}/#developers"
  loop: "{{ plugins_needing_upgrade.stdout_lines }}"
  when: plugins_needing_upgrade.stdout_lines is defined
  tags: upgrade-plugins

