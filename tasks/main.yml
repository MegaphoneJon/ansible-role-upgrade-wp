---
- name: Ensure file owner/perms are correct
  file:
    path: "{{ webroot }}"
    state: directory
    mode: 02770
    owner: "{{ run_as_user }}"
    group: "{{ run_as_user }}"
  become: yes

- name: git pull
  git:
    repo: "{{ git_repo_url }}"
    dest: "{{ gitroot }}"
    version: "{{ git_main_branch }}"
    track_submodules: no
  become: yes
  become_user: "{{ run_as_user }}"
  when: git_repo_name is not none

- name: Get current git commit hash
  command: git rev-parse HEAD
  args:
    chdir: "{{ webroot }}"
  register: latest_commit
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: FALSE
  when: cms == 'WordPress' and contract_type is search("WordPress Maintenance")

- name: Clear "last updated" times so we can get the latest update info
  command: wp transient delete --network --all
  args:
    chdir: "{{ webroot }}"
  changed_when: false
  when: cms == 'WordPress' and contract_type is search("WordPress Maintenance")
  become: yes
  become_user: "{{ run_as_user }}"

- name: See if core needs updating
  command: wp core check-update --field=version --format=csv
  args:
    chdir: "{{ webroot }}"
  register: latest_core_version
  changed_when: false
  failed_when: false
  when: cms == 'WordPress' and contract_type is search("WordPress Maintenance")
  become: yes
  become_user: "{{ run_as_user }}"

- name: Update core
  command: wp core update
  args:
    chdir: "{{ webroot }}"
  become: yes
  become_user: "{{ run_as_user }}"
  when:  latest_core_version.stdout is defined and latest_core_version.stdout != ""

- name: git add the core update
  command: git add -v -A
  args:
    chdir: "{{ webroot }}"
  register: add_result
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: add_result.stdout != ''
  failed_when: add_result.stderr != ''
  when:  latest_core_version.stdout is defined and latest_core_version.stdout != ""

- name: git commit core update
  command: "git commit -m 'WP core upgrade: Version {{ latest_core_version.stdout }}'"
  args:
    chdir: "{{ webroot }}"
  register: commit_result
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: commit_result.rc == 0
  failed_when: not(commit_result.rc == 0 or 'nothing to commit, working tree clean' in commit_result.stdout_lines)
  when:  latest_core_version.stdout is defined and latest_core_version.stdout != ""

- name: Get a list of plugins that need updating
  shell: "wp plugin status | grep '^ U' | tr -s ' ' | cut -f 3 -d ' '"
  args:
    chdir: "{{ webroot }}"
  register: plugins_needing_upgrade
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: false
  failed_when: plugins_needing_upgrade.stderr != ''
  when: cms == 'WordPress' and contract_type is search("WordPress Maintenance")
  tags: upgrade-plugins

- name: Set module variable to plugin
  set_fact:
    module_type: "plugin"
  tags: upgrade-plugins

- name: Update plugins
  include_tasks:
    file: update-module.yml
  loop: "{{ plugins_needing_upgrade.stdout_lines }}"
  when: plugins_needing_upgrade.stdout_lines is defined and item not in plugin_redlist
  tags: upgrade-plugins

- name: Get a list of themes that need updating
  shell: "wp theme status | grep '^ U' | tr -s ' ' | cut -f 3 -d ' '"
  args:
    chdir: "{{ webroot }}"
  register: themes_needing_upgrade
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: false
  failed_when: themes_needing_upgrade.stderr != ''
  when: cms == 'WordPress' and contract_type is search("WordPress Maintenance")

- name: Set module variable to theme
  set_fact:
    module_type: "theme"

- name: Update themes
  include_tasks:
    file: update-module.yml
  loop: "{{ themes_needing_upgrade.stdout_lines }}"
  when: themes_needing_upgrade.stdout_lines is defined and item not in theme_redlist

- name: Update translations
  command: "{{ item }}"
  args:
    chdir: "{{ webroot }}"
  become: yes
  become_user: "{{ run_as_user }}"
  register: translation_result
  with_items:
    - 'wp language core update'
    - 'wp language plugin update --all'
    - 'wp language theme update --all'
  changed_when: translation_result.stdout is not search("Translations are up to date.")

- name: git add translations
  command: git add -v -A
  args:
    chdir: "{{ webroot }}"
  register: add_result
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: add_result.stdout != ''
  failed_when: add_result.stderr != ''

- name: git commit translations
  command: "git commit -m 'WP translation updates'"
  args:
    chdir: "{{ webroot }}"
  register: commit_result
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: commit_result.rc == 0
  failed_when: not(commit_result.rc == 0 or 'nothing to commit, working tree clean' in commit_result.stdout_lines)

- name: git push
  command: git push
  args:
    chdir: "{{ webroot }}"
  register: push_result_addl
  become: yes
  become_user: "{{ run_as_user }}"
  when: internal_repo == "1" and (git_repo_push_url is search("ssh://"))
  changed_when: push_result_addl.rc == 0 and push_result_addl.stderr != 'Everything up-to-date'
  failed_when: not(push_result_addl.rc == 0)
  tags: upgrade-plugins

- name: Get git changelog
  command: "git log --oneline {{ latest_commit.stdout }}..HEAD"
  args:
    chdir: "{{ webroot }}"
  register: changelog
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: FALSE
  when: latest_commit.stdout is defined
  tags: upgrade-plugins

- name: Print git changelog
  debug:
    var: changelog.stdout
  changed_when: FALSE
  when: latest_commit.stdout is defined
  tags: upgrade-plugins

- name: List changelog links
  debug:
    msg: "https://wordpress.org/plugins/{{ item }}/#developers"
  loop: "{{ plugins_needing_upgrade.stdout_lines }}"
  when: plugins_needing_upgrade.stdout_lines is defined
  tags: upgrade-plugins

